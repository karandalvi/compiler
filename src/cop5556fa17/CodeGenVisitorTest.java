package cop5556fa17;

import static org.junit.Assert.assertEquals;

import java.io.FileOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556fa17.AST.Program;
import cop5556fa17.CodeGenUtils.DynamicClassLoader;

public class CodeGenVisitorTest {
	
	static boolean doPrint = true;
	static boolean doCreateFile = false;

	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	private boolean devel = true;
	private boolean grade = true;
	
	
	/**
	 * Generates bytecode for given input.
	 * Throws exceptions for Lexical, Syntax, and Type checking errors
	 * 
	 * @param input   String containing source code
	 * @return        Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {
		
		//scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));
		
		//write byte code to file 
		if (doCreateFile) {
			String name = ((Program) program).name;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}
		
		//return generated classfile as byte array
		return bytecode;
	}
	
	/**
	 * Run main method in given class
	 * 
	 * @param className    
	 * @param bytecode    
	 * @param commandLineArgs  String array containing command line arguments, empty array if none
	 * @throws Exception
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception {
		RuntimeLog.initLog(); //initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		Class[] argTypes = {commandLineArgs.getClass()};
		Method m = testClass.getMethod("main", argTypes );
		show("Output from " + m + ":");  //print name of method to be executed
		Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		m.invoke(null, passedArgs);	
	}

//	@Test
//	public void emptyProg() throws Exception {
//		String prog = "emptyProg";	
//		String input = prog;
//		byte[] bytecode = genCode(input);
//		String[] commandLineArgs = {};
//		runCode(prog, bytecode, commandLineArgs);
//		show("Log:\n "+RuntimeLog.globalLog);
//		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
//	}
//	
//	
//	@Test
//	public void prog1() throws Exception {
//		String prog = "prog1";
//		String input = prog + "\nint g;\ng = 3;\ng -> SCREEN; ";	
//		byte[] bytecode = genCode(input);		
//		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
//		runCode(prog, bytecode, commandLineArgs);	
//		show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;3;3;leaving main;",RuntimeLog.globalLog.toString());
//	}
//	
//	@Test
//	public void prog2() throws Exception {
//		String prog = "prog2";
//		String input = prog  + "\nboolean g;\ng = true;\ng -> SCREEN;\ng = false;\ng -> SCREEN;";	
//		show(input);
//		byte[] bytecode = genCode(input);		
//		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
//		runCode(prog, bytecode, commandLineArgs);
//		show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;true;true;false;false;leaving main;",RuntimeLog.globalLog.toString() );
//	}
//	
//	@Test
//	public void prog3() throws Exception {
//		//scan, parse, and type check the program
//		String prog = "prog3";
//		String input = prog
//				+ " boolean g;\n"
//				+ "g <- @ 0;\n"
//				+ "g -> SCREEN;\n"
//				+ "int h;\n"
//				+ "h <- @ 1;\n"
//				+ "h -> SCREEN;";	
//		byte[] bytecode = genCode(input);		
//		String[] commandLineArgs = {"true", "55"}; //create command line argument array to initialize params, none in this case		
//		runCode(prog, bytecode, commandLineArgs);	
//		show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;0;true;1;55;leaving main;",RuntimeLog.globalLog.toString());
//	}
//	
//	@Test
//	public void prog4() throws Exception {
//		//scan, parse, and type check the program
//		String prog = "prog4";
//		String input = prog
//				+ " boolean g;\n"
//				+ "g <- @ 0;\n"
//				+ "g -> SCREEN;\n"
//				+ "int h;\n"
//				+ "h <- @ 1;\n"
//				+ "h -> SCREEN;\n"
//				+ "int k;\n"
//				+ "k <- @ 2;\n"
//				+ "k -> SCREEN;\n"
//				+ "int chosen;"
//				+ "chosen = g ? h : k;\n"
//				+ "chosen -> SCREEN;"
//				;	
//		show(input);
//		byte[] bytecode = genCode(input);		
//		String[] commandLineArgs = {"true", "34", "56"}; //create command line argument array to initialize params, none in this case		
//		runCode(prog, bytecode, commandLineArgs);	
//		show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;0;true;1;34;2;56;true;34;34;leaving main;",RuntimeLog.globalLog.toString());
//	}
//	
//	
//	@Test
//	public void unaryExpr() throws Exception {
//		String prog = "unaryExpr";
//		String input = prog + 
//				"\nboolean g = false;\n" +
//				"g -> SCREEN;\n"
//				+ "g = !g;\n"
//				+ "g -> SCREEN;";
//		show(input);
//		byte[] bytecode = genCode(input);		
//		String[] commandLineArgs = {}; 
//		runCode(prog, bytecode, commandLineArgs);		
//		show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;false;false;false;true;true;leaving main;",RuntimeLog.globalLog.toString());
//										
//	}
	
	//-------------------------------------------------------
	
	
	@Test
	public void emptyProg() throws Exception {
		String prog = "emptyProg";	
		String input = prog;
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n "+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progVarDec01() throws Exception {
		String prog = "progVarDec01";
		String input = prog + "\nint g = 3;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progVarDec02() throws Exception {
		String prog = "progVarDec02";
		String input = prog + "\nboolean g = true;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progVarDec03() throws Exception {
		String prog = "progVarDec03";
		String input = prog + "\nint g;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progVarDec04() throws Exception {
		String prog = "progVarDec04";
		String input = prog + "\nboolean g = false;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progVarDec05() throws Exception {
		String prog = "progVarDec05";
		String input = prog + "\nboolean g = false; boolean c = g;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progStateAssign01() throws Exception {
		String prog = "progStateAssign01";
		String input = prog + "\nint g;\ng = 3;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progStateAssign02() throws Exception {
		String prog = "progStateAssign01";
		String input = prog + "\nint g = 3; int k = 4; int l = g + k;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;4;3;4;7;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progStateOut01() throws Exception {
		String prog = "progStateOut01";
		String input = prog + "\nint g;\ng = 3;\ng -> SCREEN; ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progStateOut02() throws Exception {
		String prog = "progStateOut02";
		String input = prog  + "\nboolean g;\ng = true;\ng -> SCREEN;\ng = false;\ng -> SCREEN;";	
		show(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;true;false;false;leaving main;",RuntimeLog.globalLog.toString() );
	}
	
	@Test
	public void progSrcCmdLine01() throws Exception {
		//scan, parse, and type check the program
		String prog = "progSrcCmdLine01";
		String input = prog
				+ " boolean g;\n"
				+ "g <- @ 0;\n"
				+ "g -> SCREEN;\n"
				+ "int h;\n"
				+ "h <- @ 1;\n"
				+ "h -> SCREEN;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"true", "55"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0;true;1;55;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary01() throws Exception {
		String prog = "progBinary01";
		String input = prog + "\nint g;\ng = 5*6; ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;6;30;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary02() throws Exception {
		String prog = "progBinary02";
		String input = prog + "\nint g;\ng = 10-6;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;6;4;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary03() throws Exception {
		String prog = "progBinary03";
		String input = prog + "\nint g;\ng = 3-6;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;6;-3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary04() throws Exception {
		String prog = "progBinary04";
		String input = prog + "\nint g;\ng = 3+6;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;6;9;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary05() throws Exception {
		String prog = "progBinary05";
		String input = prog + "\nint g;\ng = 10/2;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;2;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary06() throws Exception {
		String prog = "progBinary06";
		String input = prog + "\nint g;\ng = 9/2;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;9;2;4;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary07() throws Exception {
		String prog = "progBinary07";
		String input = prog + "\nint g;\ng = 9%2;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;9;2;1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary08() throws Exception {
		String prog = "progBinary08";
		String input = prog + "\nboolean g;\ng = 9!=2;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;9;2;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary09() throws Exception {
		String prog = "progBinary09";
		String input = prog + "\nboolean g;\ng = 9==2;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;9;2;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary10() throws Exception {
		String prog = "progBinary10";
		String input = prog + "\nboolean g;\ng = 6!=6;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;6;6;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary11() throws Exception {
		String prog = "progBinary11";
		String input = prog + "\nboolean g;\ng = 6==6;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;6;6;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary12() throws Exception {
		String prog = "progBinary12";
		String input = prog + "\nboolean g;\ng = true==true;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;true;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary13() throws Exception {
		String prog = "progBinary13";
		String input = prog + "\nboolean g;\ng = true==false;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;false;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary14() throws Exception {
		String prog = "progBinary14";
		String input = prog + "\nboolean g;\ng = false==false;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;false;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary15() throws Exception {
		String prog = "progBinary15";
		String input = prog + "\nboolean g;\ng = true!=true;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;true;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary16() throws Exception {
		String prog = "progBinary16";
		String input = prog + "\nboolean g;\ng = false!=false;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;false;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
//	@Test
//	public void progBinary17() throws Exception {
//		String prog = "progBinary17";
//		String input = prog + "\n int g;\ng = (5 ** 3);";	
//		byte[] bytecode = genCode(input);		
//		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
//		runCode(prog, bytecode, commandLineArgs);	
//		show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;5;3;125;leaving main;",RuntimeLog.globalLog.toString());
//	}
	
	@Test
	public void progBinary18() throws Exception {
		String prog = "progBinary18";
		String input = prog + "\nboolean g;\ng = true | false;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;false;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary19() throws Exception {
		String prog = "progBinary19";
		String input = prog + "\nint g;\ng = 1 | 2;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;2;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary20() throws Exception {
		String prog = "progBinary20";
		String input = prog + "\nboolean g;\ng = false & true;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;true;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary21() throws Exception {
		String prog = "progBinary21";
		String input = prog + "\nint g;\ng = 7 & 5;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;5;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary22() throws Exception {
		String prog = "progBinary22";
		String input = prog + "\nboolean g;\ng = 7 < 10;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;10;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary23() throws Exception {
		String prog = "progBinary23";
		String input = prog + "\nboolean g;\ng = 7 < 7;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;7;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary24() throws Exception {
		String prog = "progBinary24";
		String input = prog + "\nboolean g;\ng = 7 <= 7;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;7;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary25() throws Exception {
		String prog = "progBinary25";
		String input = prog + "\nboolean g;\ng = 7 <= 8;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;8;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary26() throws Exception {
		String prog = "progBinary26";
		String input = prog + "\nboolean g;\ng = 7 > 10;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;10;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary27() throws Exception {
		String prog = "progBinary27";
		String input = prog + "\nboolean g;\ng = 7 > 7;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;7;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary28() throws Exception {
		String prog = "progBinary28";
		String input = prog + "\nboolean g;\ng = 7 >= 7;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;7;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progBinary29() throws Exception {
		String prog = "progBinary29";
		String input = prog + "\nboolean g;\ng = 7 >= 8;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;8;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progConditional01() throws Exception {
		String prog = "progConditional01";
		String input = prog + "\nint g;\ng = (1==1? 10 : 20);";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;1;true;10;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progConditional02() throws Exception {
		String prog = "progConditional02";
		String input = prog + "\nint g;\ng = (1!=1? 10 : 20);";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;1;false;20;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progConditional03() throws Exception {
		String prog = "progConditional03";
		String input = prog + "\nint g;\ng = (1!=1? 10: 20) + 5;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;1;false;20;5;25;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void progExpIdt01() throws Exception {
		String prog = "progExpIdt01";
		String input = prog + "\nint g;\ng = 10; \n int b = g; \n b -> SCREEN;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;10;10;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void prog4() throws Exception {
		//scan, parse, and type check the program
		String prog = "prog4";
		String input = prog
				+ " boolean g;\n"
				+ "g <- @ 0;\n"
				+ "g -> SCREEN;\n"
				+ "int h;\n"
				+ "h <- @ 1;\n"
				+ "h -> SCREEN;\n"
				+ "int k;\n"
				+ "k <- @ 2;\n"
				+ "k -> SCREEN;\n"
				+ "int chosen;"
				+ "chosen = g ? h : k;\n"
				+ "chosen -> SCREEN;"
				;	
		show(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"true", "34", "56"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0;true;1;34;2;56;true;34;34;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void unaryExpr01() throws Exception {
		String prog = "unaryExpr01";
		String input = prog + 
				"\nint g = !5;\n" +
				"g -> SCREEN;\n";
		show(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 
		runCode(prog, bytecode, commandLineArgs);		
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;-5;-5;leaving main;",RuntimeLog.globalLog.toString());
										
	}

	@Test
	public void unaryExpr02() throws Exception {
		String prog = "unaryExpr02";
		String input = prog + 
				"\nboolean g = !true;\n" +
				"g -> SCREEN;\n";
		show(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 
		runCode(prog, bytecode, commandLineArgs);		
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;false;false;leaving main;",RuntimeLog.globalLog.toString());
										
	}
	
	@Test
	public void unaryExpr03() throws Exception {
		String prog = "unaryExpr03";
		String input = prog + 
				"\nint g = -(100 + 10);\n" +
				"g -> SCREEN;\n";
		show(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 
		runCode(prog, bytecode, commandLineArgs);		
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;100;10;110;-110;-110;leaving main;",RuntimeLog.globalLog.toString());
										
	}
	

	@Test
	public void unaryExpr04() throws Exception {
		String prog = "unaryExpr04";
		String input = prog + 
				"\nint g = +15 + -10;\n" +
				"g -> SCREEN;\n";
		show(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 
		runCode(prog, bytecode, commandLineArgs);		
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;15;15;10;-10;5;5;leaving main;",RuntimeLog.globalLog.toString());
										
	}
	
	@Test
	public void unaryExpr() throws Exception {
		String prog = "unaryExpr";
		String input = prog + 
				"\nboolean g = false;\n" +
				"g -> SCREEN;\n"
				+ "g = !g;\n"
				+ "g -> SCREEN;";
		show(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 
		runCode(prog, bytecode, commandLineArgs);		
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;false;false;true;true;leaving main;",RuntimeLog.globalLog.toString());
										
	}

}
